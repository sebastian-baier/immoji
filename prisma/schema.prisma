generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id           String        @id @default(uuid())
  userName     String?
  githubId     String?
  googleId     String?
  facebookId   String?
  appleId      String?
  email        String?       @unique
  name         String?
  role         Role          @default(USER)
  picture      String?
  transactions Transaction[] // User transactions
  sessions     Session[]     // User sessions
  files        File[]        // Files associated with the user
  properties   Property[]    // Optional relationship to properties
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  expiresAt DateTime

  user User @relation(references: [id], fields: [userId])
}

enum Role {
  USER
  ADMIN
}

model Transaction {
  id         String          @id @default(uuid())
  comment    String?
  value      Decimal
  categoryId String
  type       TransactionType
  user       User            @relation(fields: [userId], references: [id])
  userId     String

  category TransactionCategory @relation(fields: [categoryId], references: [id])
}

model TransactionCategory {
  id           String        @id @default(uuid())
  name         String        @unique
  transactions Transaction[]
}

enum TransactionType {
  OUTGOING
  INGOING
}

model Property {
  id                    String                  @id @default(uuid())
  objectNumber          String?
  locality              String
  street                String
  zipCode               Int
  houseNumber           String
  Type                  PropertyTypes
  rentValue             Decimal                 @default(0.0)
  additionalCosts       Decimal                 @default(0.0)
  purchasePrice         Decimal?
  RentAdjustmentHistory RentAdjustmentHistory[]
  currentRenterId       String?
  CurrentRenter         Renter?                 @relation(fields: [currentRenterId], references: [id])
  Loans                 Loan[]
  Maintenances          Maintenance[]
  Files                 File[]
  userId                String
  Owner                 User                    @relation(fields: [userId], references: [id])

  area             Float?
  constructionYear Int?
  roomCount        Int?
  RenterHistory    Renter[] @relation("PropertyRenterHistory")

  Features PropertyFeature[] @relation("PropertyFeatures")
  parentId String? // Referenz auf das Ã¼bergeordnete Property
  Parent   Property?         @relation("PropertyHierarchy", fields: [parentId], references: [id])
  Children Property[]        @relation("PropertyHierarchy")
  propertyManagementId String?
  PropertyManagement PropertyManagement? @relation(fields: [propertyManagementId], references: [id])
}

model PropertyManagement {
  id            String                  @id @default(uuid())
  name          String                  @unique
  email         String
  phoneNumber   String
  Properties    Property[]
  PropertyManagementEmployee PropertyManagementEmployee[]
}

model PropertyManagementEmployee {
  id            String                  @id @default(uuid())
  firstName     String
  lastName      String
  email         String
  phoneNumber   String
  comment       String
  propertyManagementId String?
  PropertyManagement PropertyManagement? @relation(fields: [propertyManagementId], references: [id])
}

enum PropertyTypes {
  COMPLEX
  APARTMENT
  HOUSE
  GARAGE
}

model PropertyFeature {
  id         String     @id @default(uuid())
  name       String     @unique
  Properties Property[] @relation("PropertyFeatures")
}

model Renter {
  id              String     @id @default(uuid())
  firstName       String
  lastName        String
  email           String     @unique
  phoneNumber     String
  startRentDate   DateTime
  endRentDate     DateTime?

  Properties      Property[]
  PastProperties  Property[] @relation("PropertyRenterHistory")
  RentAdjustmentHistory RentAdjustmentHistory[]
  Files           File[]
}

model RentAdjustmentHistory {
  id         String      @id @default(uuid())
  propertyId String
  renterId   String
  rentValue  Decimal
  date       DateTime
  reason     String?

  Property   Property @relation(fields: [propertyId], references: [id])
  Renter     Renter @relation(fields: [renterId], references: [id])
  Files File[] @relation("RentAdjustmentFiles")
}

model Loan {
  id              String      @id @default(uuid())
  propertyId      String
  lender          String
  principalAmount Decimal
  interestRate    Decimal
  startDate       DateTime
  endDate         DateTime
  monthlyPayment  Decimal

  Property Property @relation(fields: [propertyId], references: [id])
}

model Maintenance {
  id          String      @id @default(uuid())
  propertyId  String
  date        DateTime
  cost        Decimal
  description String

  Property Property @relation(fields: [propertyId], references: [id])

  Files File[] @relation("MaintenanceFiles")
}

model File {
  id          String   @id @default(uuid())
  userId      String
  propertyId  String?
  renterId    String?
  url         String
  description String?
  createdAt   DateTime @default(now())

  User     User      @relation(fields: [userId], references: [id])
  Property Property? @relation(fields: [propertyId], references: [id])
  Renter   Renter?   @relation(fields: [renterId], references: [id])

  Maintenance     Maintenance[]           @relation("MaintenanceFiles")
  RentAdjustments RentAdjustmentHistory[] @relation("RentAdjustmentFiles")
  Tags            Tag[]
}

model Tag {
  name String @id

  Files File[]
}

model Tax {
  id          String   @id @default(uuid())
  propertyId  String
  amount      Decimal
  date        DateTime
  description String
}
